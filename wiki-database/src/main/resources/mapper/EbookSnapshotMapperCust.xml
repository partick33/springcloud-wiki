<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.partick.database.mapper.EbookSnapshotMapperCust">
    <insert id="insertEookSnapshot">
        insert into ebook_snapshot(ebook_id, `date`, view_count, vote_count, view_increase, vote_increase)
        select t1.id, curdate(), 0, 0, 0, 0
        from ebook t1
        where not exists(select 1 from ebook_snapshot t2 where t1.id = t2.ebook_id and t2.`date` = curdate());
    </insert>

    <update id="updateEookSnapshot">
        update ebook_snapshot t1,ebook t2
        set t1.view_count = t2.view_count, t1.vote_count = t2.vote_count
        where t1.`date` = curdate() and t1.ebook_id = t2.id;
    </update>

    <update id="updateEbookSnapshotIncrease">
        UPDATE ebook_snapshot t1 left join (select ebook_id, view_count, vote_count from ebook_snapshot
            where `date` = date_sub(curdate(), interval 1 day)) t2
        on t1.ebook_id = t2.ebook_id
            set t1.view_increase=(t1.view_count-ifnull(t2.view_count, 0)),
                t1.vote_increase=(t1.vote_count-ifnull(t2.vote_count, 0))
        where t1.date=curdate();
    </update>

    <delete id="deleteEbookSnapshotByEbookId">
        delete
        from ebook_snapshot
        where ebook_id = #{id}
    </delete>

    <select id="getStatistic" resultType="com.partick.common.resp.StatisticResp">
        select t1.`date`,
               sum(t1.view_count)    as viewCount,
               sum(t1.vote_count)    as voteCount,
               sum(t1.view_increase) as viewIncrease,
               sum(t1.vote_increase) as voteIncrease
        from ebook_snapshot t1
        where t1.`date` >= date_sub(curdate(), interval 1 day)
        group by t1.`date`
        order by t1.`date` asc
    </select>

    <select id="get30Statistic" resultType="com.partick.common.resp.StatisticResp">
        select
            t1.`date` as `date`,
            sum(t1.view_increase) as viewIncrease,
            sum(t1.vote_increase) as voteIncrease
        from
            ebook_snapshot t1
        where
            t1.`date` between date_sub(curdate(), interval 30 day) and date_sub(curdate(), interval 1 day)
        group by
            t1.`date`
        order by
            t1.`date` asc;
    </select>

    <select id="selectForEs" resultType="com.partick.database.entity.EbookSnapshot">
        select
            ebook_id AS ebookId,
            date,
            view_count as viewCount,
            vote_count as voteCount,
            view_increase as viewIncrease,
            vote_increase as voteIncrease
        from
            ebook_snapshot
    </select>
</mapper>